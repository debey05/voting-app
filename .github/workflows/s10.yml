name: Deploy Compose s10 

on:
  push:

jobs:
  deploy:
    name: Deploy on Self-Hosted Runner
    runs-on: [vottingapprunner]

    steps:
      - name: Fix permissions before checkout
        run: sudo chown -R $USER:$USER ${{ github.workspace }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up environments
        run: |
          echo "Updating system and installing dependencies..."
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose curl git unzip

          echo "Enabling Docker service..."
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER

      - name: Verify Docker installation
        run: |
          docker --version
          docker-compose --version
          sudo chmod 666 /var/run/docker.sock

      - name: Clean up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/share/dotnet
          docker builder prune -af || true
          docker system prune -af --volumes || true
          docker image prune -af || true
          docker volume prune -f || true
          df -h

      - name: Install kubectl, eksctl, and AWS CLI
        run: |
          # Install kubectl
          sudo curl --silent --location -o /usr/local/bin/kubectl \
            https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
          sudo chmod +x /usr/local/bin/kubectl

          # Install AWS CLI v2
          curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update

          # Install eksctl
          curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Ensure SonarQube Project Exists
        run: |
          curl -s -u "${{ secrets.SONAR_ADMIN_USER }}:${{ secrets.SONAR_ADMIN_PASS }}" \
            -X POST \
            "${{ secrets.SONAR_HOST_URL }}/api/projects/create?project=voting-app&name=voting-app" \
            || echo "Project may already exist, skipping..."

      - name: Install SonarScanner CLI
        run: |
          echo "Installing SonarScanner CLI..."
          
          # Try multiple download approaches
          SONAR_SCANNER_VERSION="5.0.1.3006"  # Use a known working version
          
          # Method 1: Try direct download from GitHub (recommended)
          if curl -fSL -o sonar-scanner.zip "https://github.com/SonarSource/sonar-scanner-cli/releases/download/${SONAR_SCANNER_VERSION}/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"; then
              echo "✅ Downloaded from GitHub successfully"
          # Method 2: Fallback to SonarSource distribution
          elif curl -fSL -o sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"; then
              echo "✅ Downloaded from SonarSource distribution"
          # Method 3: Final fallback
          else
              echo "⚠️ Both methods failed, trying alternative version..."
              SONAR_SCANNER_VERSION="4.8.0.2856"
              curl -fSL -o sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
          fi

          # Verify download
          if [ ! -s sonar-scanner.zip ]; then
              echo "❌ SonarScanner download failed!"
              exit 1
          fi

          # Install
          unzip -q sonar-scanner.zip -d $HOME
          SONAR_DIR="sonar-scanner-${SONAR_SCANNER_VERSION}-linux"
          mv "$HOME/$SONAR_DIR" "$HOME/sonar-scanner"
          echo "$HOME/sonar-scanner/bin" >> $GITHUB_PATH
          echo "✅ SonarScanner installed: $SONAR_SCANNER_VERSION"

      - name: Run SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=voting-app \
            -Dsonar.projectName="Voting App" \
            -Dsonar.sources=vote,worker,result \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Deploy with Docker Compose
        run: |
          docker-compose down || true
          docker-compose up -d

      - name: Create EKS cluster if not exists
        run: |
          export AWS_MAX_ATTEMPTS=100
          export AWS_POLL_DELAY_SECONDS=10
          
          if aws eks describe-cluster --name demo-eks --region us-east-1 >/dev/null 2>&1; then
            echo "✅ Cluster 'demo-eks' already exists. Skipping creation."
          else
            echo "🚀 Creating cluster 'demo-eks'..."
            eksctl create cluster \
              --name demo-eks \
              --region us-east-1 \
              --nodegroup-name my-nodes \
              --node-type t3.small \
              --managed \
              --nodes 2
          fi

      - name: Update kubeconfig for EKS
        run: |
          export AWS_MAX_ATTEMPTS=100
          export AWS_POLL_DELAY_SECONDS=17
          aws eks update-kubeconfig --name demo-eks --region us-east-1
          
          if kubectl get namespace s10deborah >/dev/null 2>&1; then
            echo "✅ Namespace 's10deborah' already exists. Skipping creation."
          else
            echo "🚀 Creating namespace 's10deborah'..."
            kubectl create namespace s10deborah
          fi
          
          kubectl apply -f cd-files/vote-deployment.yaml --namespace s10deborah
          kubectl get all --namespace s10deborah
          kubectl get nodes -o wide

      - name: Cleanup environment (keep running containers)
        if: always()
        run: |
          echo "🧹 Cleaning up unused Docker resources and temporary files (containers stay running)..."
          docker system prune -af --volumes
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          find ${{ github.workspace }} -mindepth 1 -maxdepth 1 ! -name '.git' -exec sudo rm -rf {} +
